#include <stdio.h>
#include <stdlib.h>
#include <string.h>

FILE *inp = fopen("hw4.inp", "rt");
FILE *out = fopen("hw4.out", "wt");

char new_track[5], new_key[5], check_key[5];
int total_node = 1, length;

// 레코드 선언
typedef struct Record {
	struct Record* child[10];
	int check;
	char track[5], key[5];
}Record;

Record* Create_Node() { //init
	Record* new_Node = (Record *)malloc(sizeof(Record));
	new_Node->check = 0;
	for (int i = 0; i < 10; i++) new_Node->child[i] = 0;
	return new_Node;
}

void Insert_Node(Record* root) {

	Record* now = root;

	for (int i = 1; i <= 4; i++) {
		if (!now->child[new_track[i] - '0']) {
			total_node++;
			now->child[new_track[i] - '0'] = Create_Node();
		}
		now = now->child[new_track[i] - '0'];
		now->check = 1;
		if (i == 4) {
			total_node--; 
			for (int j = 1; j <= 4; j++) {
				now->track[j] = new_track[j];
				now->key[j] = new_key[j];
			}
		}
	}
}

void input() {

	char comma, num;

	for (int i = 1; i <= 4; i++) {
		fscanf(inp, "%c", &num);
		new_track[i] = num;
	}
	fscanf(inp, "%c", &comma);
	// 그때의 key 값
	for (int i = 1; i <= 4; i++) {
		fscanf(inp, "%c", &num);
		new_key[i] = num;
	}
}

void cal(Record* root) {

	Record* now = root;

	for (int i = 1; i <= length - 1; i++) {

		now = now->child[check_key[i] - '0'];

		if (i == 3) {
			for (int j = 0; j < 10; j++) {
				if (now->child[j] != NULL)
				if (j == (check_key[4] - '0')) break;
			}
		}
	}
	
}

int main() {

	if ((inp = fopen("hw4.inp", "rt")) == NULL) fprintf(stderr, "cant't open %s\n", "hw4.inp");
	if ((out = fopen("hw4.out", "wt")) == NULL) fprintf(stderr, "cant't open %s\n", "hw4.out");

	Record* root = Create_Node();
	// 입력
	while (1) {
		char check_char;

		fscanf(inp, "%c", &check_char);
		// \n받으면 입력 끝
		if (check_char == '\n') break;

		else if (check_char == '(') {
			input();
			Insert_Node(root);
		}
	}

	fprintf(out, "%d\n", total_node);
	// 계산
	for(int i = 1 ; ; i++) {

		char check_char;

		fscanf(inp, "%c", &check_char);
		// 4개 다받으면 다시 1로 돌리기
		if (i == 5) {
			cal(root); length = 0;
		}
		// \n받으면 입력 끝
		if (check_char == '\n') break;
		// wildcard 계산
		else if (check_char == '*') {
			cal(root); length = 0;
		}
		
		// 위 사항들 아닐경우 배열에 넣기
		check_key[i] = check_char;
		length++;
		// 계산 끝났으면 최신화
		if (check_char == ' ') {
			for (int j = 0; j <= 4; j++) check_key[j] = 0;
			i = 0;
		}
	}

	fprintf(out, "*\n");
	fclose(inp);
	fclose(out);
	return 0;
}